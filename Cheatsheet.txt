FLASK CHEAT SHEET â€“ QUICK REFERENCE FOR BEGINNERS
=========================================================

âœ… 1. What is Flask?
- Flask is a lightweight Python web framework for building web apps & APIs.
- Based on Werkzeug (WSGI) and Jinja2 (templating engine).
- Minimal, fast, and easy to learn.

---------------------------------------------------------

âœ… 2. Installation
pip install flask
pip install flask_sqlalchemy     # Database ORM
pip install flask_login          # Authentication

Run server: flask run

---------------------------------------------------------

âœ… 3. Basic Flask App
from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return "Hello Flask!"

if __name__ == '__main__':
    app.run(debug=True)

---------------------------------------------------------

âœ… 4. Routing & HTTP Methods
@app.route('/hello', methods=['GET', 'POST'])
def hello():
    if request.method == 'POST':
        return "Post Request!"
    return "Get Request!"

@app.route('/user/<name>')
def user(name):
    return f"Hello {name}"

---------------------------------------------------------

âœ… 5. Returning JSON (API)
from flask import jsonify
@app.route('/api')
def api():
    return jsonify({"status": "success", "data": [1, 2, 3]})

---------------------------------------------------------

âœ… 6. Templates (Jinja2)
- Templates go inside 'templates/' folder

from flask import render_template
@app.route('/')
def index():
    return render_template('index.html', name="John")

In template (index.html):
<h1>Hello, {{ name }}</h1>

Jinja2 Syntax:
{{ variable }}         # Print variable
{% for x in list %}    # Loop
{% if condition %}     # If condition

---------------------------------------------------------

âœ… 7. Static Files
- Static files (CSS, JS, images) go in 'static/' folder.
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">

---------------------------------------------------------

âœ… 8. Flask Database (SQLAlchemy)
from flask_sqlalchemy import SQLAlchemy

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)

with app.app_context():
    db.create_all()

# Add Data
user = User(username="John")
db.session.add(user)
db.session.commit()

# Query Data
User.query.all()
User.query.filter_by(username="John").first()

---------------------------------------------------------

âœ… 9. Flask-Login (Authentication)
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user

login_manager = LoginManager(app)
login_manager.login_view = 'login'

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True)
    password = db.Column(db.String(100))

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/login')
def login():
    user = User.query.first()
    login_user(user)
    return "Logged In!"

@app.route('/dashboard')
@login_required
def dashboard():
    return f"Welcome {current_user.username}"

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return "Logged Out!"

---------------------------------------------------------

âœ… 10. Useful Flask Commands
flask run                  # Run server
db.create_all()            # Create tables
db.drop_all()              # Drop all tables
User.query.all()           # Get all records
User.query.get(id)         # Get by ID

---------------------------------------------------------

âœ… 11. Project Structure (Recommended)
project/
 â”œâ”€ app.py
 â”œâ”€ templates/
 â”‚    â”œâ”€ index.html
 â”œâ”€ static/
 â”‚    â”œâ”€ style.css
 â””â”€ site.db

---------------------------------------------------------

âœ¨ TIP: Always use virtual environments and keep 'requirements.txt' updated.

Happy Coding with Flask! ðŸš€
